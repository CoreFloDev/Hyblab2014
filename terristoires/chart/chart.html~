<!doctype html>
<html lang="fr">
<head>
	<meta charset="UTF-8"/>
   <title>Test chart</title>
   <script type="text/javascript">
      var CanvasRenderer = function(el) {
	      var cachedBackground;
	      var canvas = document.createElement('canvas');

	      el.appendChild(canvas);

	      if (typeof(G_vmlCanvasManager) !== 'undefined') {
		      G_vmlCanvasManager.initElement(canvas);
	      }

	      var ctx = canvas.getContext('2d');

         // options
         options = new Object();
         options.size = 400;
         options.lineWidth = 10;
         options.barColor = '#45f96a';
         options.easing =function (x, t, b, c, d) { // more can be found here: http://gsgd.co.uk/sandbox/jquery/easing/
			      t = t / (d/2);
			      if (t < 1) {
				      return c / 2 * t * t + b;
			      }
			      return -c/2 * ((--t)*(t-2) - 1) + b;
		      };
		   options.onStart= function(from, to) {return;};
		   options.onStep= function(from, to, currentValue) {	return;};
		   options.onStop= function(from, to) {return;};
		   options.animate= {
			   duration: 1000,
			   enabled: true
   		};
	     
	     
	      canvas.width = canvas.height = options.size;

	      // canvas on retina devices
	      var scaleBy = 1;
	      if (window.devicePixelRatio > 1) {
		      scaleBy = window.devicePixelRatio;
		      canvas.style.width = canvas.style.height = [options.size, 'px'].join('');
		      canvas.width = canvas.height = options.size * scaleBy;
		      ctx.scale(scaleBy, scaleBy);
	      }

	      // move 0,0 coordinates to the center
	      ctx.translate(options.size / 2, options.size / 2);

	      // rotate canvas -90deg
	      ctx.rotate((-1 / 2) * Math.PI);

	      var radius = (options.size - options.lineWidth) / 2 -10;
	      if (options.scaleColor && options.scaleLength) {
		      radius -= options.scaleLength + 2; // 2 is the distance between scale and bar
	      }

	      // IE polyfill for Date
	      Date.now = Date.now || function() {
		      return +(new Date());
	      };
	      
	      
	      var drawCircle = function(color, lineWidth, percent) {
		      percent = Math.min(Math.max(-1, percent || 0), 1);
		      var isNegative = percent <= 0 ? true : false;

		      ctx.beginPath();
		      ctx.arc(0, 0, radius, 0, Math.PI * 2 * (percent*75/100), isNegative);
		      ctx.strokeStyle = '#6BB0AF';
		      ctx.lineWidth = lineWidth +8;
		      ctx.stroke();
		      
		      ctx.beginPath();
		      ctx.arc(0, 0, radius - 30, 0, Math.PI * 2 * (percent*75/100), isNegative);
		      ctx.strokeStyle = '#EBE9E4';
		      ctx.lineWidth = lineWidth+2;
		      ctx.stroke();
		      
		      ctx.beginPath();
		      ctx.arc(0, 0, radius - 60, 0, Math.PI * 2 * (percent*75/100), isNegative);
		      ctx.strokeStyle = '#BE615C';
		      ctx.lineWidth = lineWidth;
		      ctx.stroke();
		      
		      ctx.beginPath();
		      ctx.arc(0, 0, radius - 90, 0, Math.PI * 2 * (percent*75/100), isNegative);
		      ctx.strokeStyle = '#F7DE8C';
		      ctx.lineWidth = lineWidth-2;
		      ctx.stroke();
	      };
	      
	      var reqAnimationFrame = (function() {
		      return  window.requestAnimationFrame ||
				      window.webkitRequestAnimationFrame ||
				      window.mozRequestAnimationFrame ||
				      function(callback) {
					      window.setTimeout(callback, 1000 / 60);
				      };
	      }());
	      
         this.clear = function() {
	         ctx.clearRect(options.size / -2, options.size / -2, options.size, options.size);
         };

         /**
          * Draw the complete chart
          * @param {number} percent Percent shown by the chart between -100 and 100
          */
         this.draw = function(percent) {
	         // do we need to render a background
	         if (!!options.scaleColor || !!options.trackColor) {
		         // getImageData and putImageData are supported
		         if (ctx.getImageData && ctx.putImageData) {
			         if (!cachedBackground) {
				         //drawBackground();
				         cachedBackground = ctx.getImageData(0, 0, options.size * scaleBy, options.size * scaleBy);
			         } else {
				         ctx.putImageData(cachedBackground, 0, 0);
			         }
		         } else {
			         this.clear();
		         }
	         } else {
		         this.clear();
	         }

	         ctx.lineCap = options.lineCap;

	         // if barcolor is a function execute it and pass the percent as a value
	         var color;
	         if (typeof(options.barColor) === 'function') {
		         color = options.barColor(percent);
	         } else {
		         color = options.barColor;
	         }

	         // draw bar
	         drawCircle(color, options.lineWidth, percent / 100);
         }.bind(this);

         /**
          * Animate from some percent to some other percentage
          * @param {number} from Starting percentage
          * @param {number} to   Final percentage
          */
         this.animate = function(from, to) {
	         var startTime = Date.now();
	         options.onStart(from, to);
	         var animation = function() {
		         var process = Math.min(Date.now() - startTime, options.animate.duration);
		         var currentValue = options.easing(this, process, from, to - from, options.animate.duration);
		         this.draw(currentValue);
		         options.onStep(from, to, currentValue);
		         if (process >= options.animate.duration) {
			         options.onStop(from, to);
		         } else {
			         reqAnimationFrame(animation);
		         }
	         }.bind(this);

	         reqAnimationFrame(animation);
         }.bind(this);
      
      }
   
   
   </script>
</head>
<body>

<p>
Exemple : <button onclick="setPercent(100);">100</button> <button onclick="setPercent(75);" >75</button> <button onclick="setPercent(50);" >50</button> <button onclick="setPercent(25);">25</button> <button onclick="setPercent(0);">0</button>
<div id="working">
</div>
</p>
<script type="text/javascript">
canvas = new CanvasRenderer(document.getElementById('working'));
function setPercent(p) {
   canvas.animate(0, p);
}
</script>

</body>
</html>
